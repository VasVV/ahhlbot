require('dotenv').config();

const TelegramBot = require('node-telegram-bot-api');

const token = process.env.TELEGRAM_API_KEY;

const bot = new TelegramBot(token, {polling: true});

const hohloImgsArray = ['./hohloimgs/img1.jpg', './hohloimgs/img2.jpg', './hohloimgs/img3.jpg', './hohloimgs/img4.jpg', './hohloimgs/img5.jpg', './hohloimgs/img6.jpg', './hohloimgs/img7.jpg'];

const hohloPacksArray = ['CAACAgIAAxkBAAEFmmBi_syEZgmfO7QCGdZsF8oNHM5HCAACngAD4GSOEU4BGWipn4MaKQQ', 'CAACAgIAAxkBAAEFmmJi_syNoWOnXT-Js9S4zPqps6t8AgACphkAAvYQ6Ep15Rf7Ky5lFSkE', 'CAACAgIAAxkBAAEFmmRi_sybzynsjXDTh9NmZmT4KPIAARYAAi8AAzO01hmId8E_ZDCYNSkE', 'CAACAgQAAxkBAAEFmmZi_syqa99dca-bHTvLkgcv_pmdGAACFQ0AAstECVETIDXCt8d-QykE', 'CAACAgIAAxkBAAEFmmhi_syxzluyZJg5T69zp4rMaVEPpAACphgAAqYf6EmDpcqZLPN7XykE', 'CAACAgIAAxkBAAEFmmpi_sy_sazBOq8iH7MlUedU81_OoQAC1AoAAvkd4Et4dsoF76Fu_ikE', 'CAACAgIAAxkBAAEFmmxi_szRDZ2rH9wGUOi1gbfmwHaMbQACpwAD4GSOEWRCuwABptXMaSkE']

const keyboard = [
    [
      {
        text: 'üí§–ü–∞—Ç—Ä–∏–æ—Ç–∏Z–∞—Ç–æ—Ä —Ç–µ–∫—Å—Ç–∞', 
        callback_data: 'patriotText' 
      }
    ],
    [
      {
        text: 'üêñ–°—Ç–∏–∫–µ—Ä–ø–∞–∫–∏ –¥–ª—è –∫–∏–±–µ—ÄV–æ–∏–Ω–æ–≤',
        callback_data: 'hohloPacks'
      }
    ],
    [
      {
        text: 'üêΩV–µ—Å–µ–ª—ã–µ –∫–∞—Ä—Ç–∏–Ω–∫–∏',
        callback_data: 'hohloImgs'
      }
    ],
    [
        {
            text: 'üá∑üá∫–¢–µ—Å—Ç –Ω–∞ –ø–∞—Ç—Ä–∏–æ—Ç–∏Z–º',
            callback_data: 'patriotTest'
        }
    ]
  ];

  const patriotTestKeyboard = [
    [
        {
            text: '–†—É—Å—Å–∫–∏–π',
            callback_data: 'RU'
    }
    ],
    [
        {
            text: '–ù–µ —Ä—É—Å—Å–∫–∏–π',
            callback_data: 'hohol'
        }
    ]
  ];

const hohloPacksKeyboard = [
    [
        {
            text: '–ü–æ–Ω–∞–¥—É—Å–µ—Ä–æ–≤—ã–µ –∫–∞–∫–ª–æ—à–≤–∞–π–Ω—ã',
            callback_data: 0
        }
    ],
    [
        {
            text: '–•–æ—Ö–ª—ã –≥–æ–≤–Ω–æ–µ–¥—ã',
            callback_data: 1
        }
    ],
    [
        {
            text: '–ü–æ–Ω–∞–¥—É—Å–µ—Ä–æ–≤—ã–µ –∫–∞–∫–ª–æ—à–≤–∞–π–Ω—ã 2',
            callback_data: 2
        }
    ],
    [
        {
            text: '–ï—â–µ –Ω–µ —Å–¥–æ—Ö–ª–∞ –£–∫—Ä–∞–∏–Ω–∞',
            callback_data: 3
        }
    ],
    [
        {
            text: '–ü–æ–Ω–∞–¥—É—Å–µ—Ä–æ–≤—ã–µ –∫–∞–∫–ª–æ—à–≤–∞–π–Ω i –µ–≥–æ –¥—Ä—É–∑—å—è',
            callback_data: 4
        }
    ],
   [ 
        {
            text: '–•–æ—Ö–ª—ã –ø–∏–¥–æ—Ä–∞—Å—ã',
            callback_data: 5
        }
    ],
    [
        {
            text: '–•–æ—Ö–ª—ã —Å–æ—Å—É—Ç',
            callback_data: 6
        }
    ],
    [
        {
            text: '–í—Å–µ –ø–∞–∫–∏',
            callback_data: 'ALL'
        }
    ]
];


const patriotTest = (chatId) => {
    bot.sendPhoto(chatId, 'crimea.jpg', {
        reply_markup: {
            inline_keyboard: patriotTestKeyboard
        }
    });

    bot.on('callback_query', (query) => {
        if (query.data === 'RU') {
            bot.sendPhoto(chatId, 'patriot.jpg');
            keyboardCall(chatId);
        } else if (query.data === 'hohol')  {
            hohloImgs(chatId);
        }
        
    })
}  


const patriotText = (chatId) => {
    bot.onText(/.+/gi, async (msg, match) => {
        const chatId = msg.chat.id;
        const resp = match[0]
        .split('')
        .map(letter => {
            if (letter.match(/–≤/i)) {
                return 'V'
            } else if (letter.match(/–∑/i)) {
                return 'Z'
            } else return letter;
        })
        .join('');
        await bot.sendMessage(chatId, resp);
        
  });
  
};

const hohloImgs = (chatId) => {
    const rndInt = Math.floor(Math.random() * 7);
    const pic = hohloImgsArray[rndInt];
    bot.sendPhoto(chatId, pic, { 
        reply_markup: {
          inline_keyboard: keyboard
        }
      });
};

const genericKeyboardCall = (chatId, resp, inline_keyboard) => {
        bot.sendMessage(chatId, resp, { 
            reply_markup: {
                inline_keyboard
            }
        });
};



const keyboardCall = (chatId) => {
    bot.sendMessage(chatId, '–ü—Ä–∏–≤–µ—Ç, –î—Ä—É–≥! —á–µ–≥–æ —Ö–æ—á–µ—à—å?', { 
        reply_markup: {
            inline_keyboard: keyboard
        }
    });
}

bot.on('message', (msg) => {
    const chatId = msg.chat.id; 
    const text = msg.text;
    if (text === '/start') {
        genericKeyboardCall(chatId, 'Z–¥–∞—Ä–æVa, —á—Ç–æ –≤—ã–±–µ—Ä–µ—à—å?', keyboard)
    }
  });
  

bot.on('callback_query', async (query) => {
    const chatId = query.message.chat.id;
    if ( /[0-7]/.test(query.data) ) {
        bot.sendSticker(chatId, hohloPacksArray[query.data]);
        genericKeyboardCall(chatId, 'Z–¥–∞—Ä–æVa, —á—Ç–æ –≤—ã–±–µ—Ä–µ—à—å?', keyboard)
    } else if (query.data === 'ALL') {
        await Promise.all(hohloPacksArray.map(async hohloPack => await bot.sendSticker(chatId, hohloPack)));
        genericKeyboardCall(chatId, 'Z–¥–∞—Ä–æVa, —á—Ç–æ –≤—ã–±–µ—Ä–µ—à—å?', keyboard);
    } else {
        switch(query.data) {
            case 'patriotText': 
                bot.sendMessage(chatId, 'Vv–µ–¥–∏ –ª—é–±–æ–π —Ç–µ–∫—Å—Ç –∏ —Ç—ã –ø–æ–ª—É—á–∏—à—å –µ–≥–æ –ø–∞—Ç—Ä–∏–æ—Ç–∏—á–Ω—É—é V–µ—Ä—Å–∏—é:');
                patriotText(chatId);
                //keyboardCall(chatId);
                break;
            case 'hohloPacks':
                genericKeyboardCall(chatId, '–ö–∞–∫–æ–π –ø–∞–∫ –≤—ã–±–µ—Ä–µ—à—å?', hohloPacksKeyboard);
                
                break;
            case 'hohloImgs':
                hohloImgs(chatId);
                break;
            case 'patriotTest':
                patriotTest(chatId);
                break;
        }
    }
  });